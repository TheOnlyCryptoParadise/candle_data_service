version: 2.1
general:
  branches:
    only:
      - master
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  # localstack: localstack/platform@1.0.0
  python: circleci/python@1.2
workflows:
  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - test-pytest
      - build-dist:
          requires:
            - test-pytest
      - build-docker:
          requires:
            - build-dist
          context:
            - secrets


jobs:
  test-pytest:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python

    docker:
      - image: cimg/python:3.8 # <-- the job steps run in this container
        environment:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          FLASK_ENV: development
          FLASK_APP: candle_data_service
      - image: mariadb:latest # <-- this is spun up for us by Circle
        environment:
          MYSQL_ROOT_PASSWORD: test   
          MYSQL_USER: test   
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: candle_data_service
      - image: rabbitmq:3.9
        
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: install as package
          command: pip install -e .
      - run: 
          name: create_environment.py
          command: python candle_data_service/create_environment.py
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest
      - store_test_results:
          path: test-results

  build-dist:
    docker:
      - image: cimg/python:3.8 # <-- the job steps run in this container
        environment:
          FLASK_APP: candle_data_service       
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          args: build
      - run:
          name: run build
          command: python -m build
      - persist_to_workspace:
          root: dist/
          paths:
            - ./*



  build-docker:
    working_directory: /app
    docker:
      - image: docker:20.10.9-git
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: dist/
      - run:
          command: ls -al dist
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --no-cache \
      #         py-pip=9.0.0-r1
      #       pip install \
      #         docker-compose==1.12.0 \
      #         awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app:latest .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      # - run:
      #     name: Run tests
      #     command: |
      #       docker-compose -f ./docker-compose.test.yml up
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
              docker tag app "lewelyn/cryptoparadise-candle_data_service:${CIRCLE_SHA1}"
              docker tag app "lewelyn/cryptoparadise-candle_data_service:latest"
              docker push lewelyn/cryptoparadise-candle_data_service --all-tags
            fi
